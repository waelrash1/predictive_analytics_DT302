{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyMx/3HDSzEc8k9ToJCHKpuL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/waelrash1/predictive_analytics_DT302/blob/main/algorithms_implementation%5CDecisionTreeClassifier\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# DecisionTreeClassifier"
      ],
      "metadata": {
        "id": "pDVGW9XWI8f6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1- Algorithm: DecisionTreeClassifier\n",
        "\n",
        "Input:\n",
        "\n",
        "\n",
        "    - DataSet D = {X, Y}  // X: input features, Y: target labels\n",
        "    - FeatureSet F = {f1, f2, ..., fn}  // List of features in the dataset\n",
        "    - maxDepth  // Maximum depth of the tree\n",
        "    - minSamples  // Minimum number of samples to split a node\n",
        "\n",
        "Output:\n",
        "\n",
        "\n",
        "    - A decision tree for classification\n",
        "\n",
        "Function DecisionTreeClassifier(D, F, maxDepth, minSamples):\n",
        "\n",
        "\n",
        "    // Base case: stopping conditions\n",
        "    if all samples in D have the same label Y or maxDepth == 0 or |D| < minSamples:\n",
        "        return LeafNode with most common label in Y\n",
        "    \n",
        "    // Step 1: Select the best feature to split\n",
        "    bestFeature, bestThreshold = None, None\n",
        "    bestImpurity = infinity\n",
        "\n",
        "    for each feature f in F:\n",
        "\n",
        "        for each threshold t (possible values of f):\n",
        "            D_left, D_right = splitDataSet(D, f, t)\n",
        "\n",
        "            // Step 2: Calculate the impurity (e.g., Gini or Entropy)\n",
        "            impurity = weightedImpurity(D_left, D_right)\n",
        "\n",
        "            if impurity < bestImpurity:\n",
        "                bestImpurity = impurity\n",
        "                bestFeature = f\n",
        "                bestThreshold = t\n",
        "    \n",
        "    // Step 3: Split the dataset based on the best feature and threshold\n",
        "    D_left, D_right = splitDataSet(D, bestFeature, bestThreshold)\n",
        "\n",
        "    // Step 4: Recursively build the left and right subtrees\n",
        "    leftSubtree = DecisionTreeClassifier(D_left, F, maxDepth - 1, minSamples)\n",
        "    rightSubtree = DecisionTreeClassifier(D_right, F, maxDepth - 1, minSamples)\n",
        "\n",
        "    // Return the decision node with left and right branches\n",
        "    return DecisionNode(bestFeature, bestThreshold, leftSubtree, rightSubtree)\n",
        "\n",
        "\n",
        "Function splitDataSet(D, feature, threshold):\n",
        "\n",
        "\n",
        "    // Split dataset D into two subsets based on feature and threshold\n",
        "    D_left = {x | x[feature] <= threshold}\n",
        "    D_right = {x | x[feature] > threshold}\n",
        "    return D_left, D_right\n",
        "\n",
        "Function weightedImpurity(D_left, D_right):\n",
        "\n",
        "    // Calculate weighted impurity (e.g., Gini or Entropy) for the split\n",
        "    p_left = |D_left| / (|D_left| + |D_right|)\n",
        "    p_right = 1 - p_left\n",
        "\n",
        "    impurity_left = impurity(D_left)  // Gini or Entropy\n",
        "    impurity_right = impurity(D_right)  // Gini or Entropy\n",
        "\n",
        "    weighted_impurity = p_left * impurity_left + p_right * impurity_right\n",
        "    return weighted_impurity\n",
        "\n",
        "Function impurity(D):\n",
        "\n",
        "    // Calculate impurity (e.g., Gini or Entropy) for a dataset D\n",
        "    // For Gini: 1 - sum(p_i^2) for each class i in D\n",
        "    // For Entropy: -sum(p_i * log(p_i)) for each class i in D\n",
        "    return impurity_value\n"
      ],
      "metadata": {
        "id": "fDjTrM9CIRWQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2- Implementation DecisionTreeClassifier"
      ],
      "metadata": {
        "id": "11_s5EF3I1rp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ej92kkwSGvZh"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "class DecisionTreeClassifier:\n",
        "    def __init__(self, max_depth=None, min_samples_split=2):\n",
        "        self.max_depth = max_depth\n",
        "        self.min_samples_split = min_samples_split\n",
        "        self.tree = None\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        \"\"\"Build the decision tree based on the training data.\"\"\"\n",
        "        self.tree = self._build_tree(X, y, depth=0)\n",
        "\n",
        "    def predict(self, X):\n",
        "        \"\"\"Predict the class label for each sample in X.\"\"\"\n",
        "        return np.array([self._predict_sample(sample, self.tree) for sample in X])\n",
        "\n",
        "    def _build_tree(self, X, y, depth):\n",
        "        \"\"\"Recursive function to build the decision tree.\"\"\"\n",
        "        n_samples, n_features = X.shape\n",
        "        n_labels = len(np.unique(y))\n",
        "\n",
        "        # Stopping conditions\n",
        "        if (n_labels == 1 or n_samples < self.min_samples_split or\n",
        "            (self.max_depth is not None and depth >= self.max_depth)):\n",
        "            return self._most_common_label(y)\n",
        "\n",
        "        # Find the best split\n",
        "        best_feature, best_threshold = self._find_best_split(X, y, n_features)\n",
        "\n",
        "        if best_feature is None:\n",
        "            return self._most_common_label(y)\n",
        "\n",
        "        # Split the data\n",
        "        left_indices, right_indices = self._split(X[:, best_feature], best_threshold)\n",
        "        left_subtree = self._build_tree(X[left_indices, :], y[left_indices], depth + 1)\n",
        "        right_subtree = self._build_tree(X[right_indices, :], y[right_indices], depth + 1)\n",
        "\n",
        "        return {\n",
        "            'feature': best_feature,\n",
        "            'threshold': best_threshold,\n",
        "            'left': left_subtree,\n",
        "            'right': right_subtree\n",
        "        }\n",
        "\n",
        "    def _find_best_split(self, X, y, n_features):\n",
        "        \"\"\"Find the best feature and threshold to split the data.\"\"\"\n",
        "        best_feature = None\n",
        "        best_threshold = None\n",
        "        best_impurity = float('inf')\n",
        "\n",
        "        for feature in range(n_features):\n",
        "            thresholds = np.unique(X[:, feature])\n",
        "            for threshold in thresholds:\n",
        "                impurity = self._calculate_impurity(X[:, feature], y, threshold)\n",
        "\n",
        "                if impurity < best_impurity:\n",
        "                    best_impurity = impurity\n",
        "                    best_feature = feature\n",
        "                    best_threshold = threshold\n",
        "\n",
        "        return best_feature, best_threshold\n",
        "\n",
        "    def _calculate_impurity(self, X_column, y, threshold):\n",
        "        \"\"\"Calculate the weighted impurity (Gini index) for a split.\"\"\"\n",
        "        left_indices, right_indices = self._split(X_column, threshold)\n",
        "        if len(left_indices) == 0 or len(right_indices) == 0:\n",
        "            return float('inf')\n",
        "\n",
        "        # Calculate Gini impurity for left and right splits\n",
        "        n = len(y)\n",
        "        n_left, n_right = len(left_indices), len(right_indices)\n",
        "        gini_left = self._gini(y[left_indices])\n",
        "        gini_right = self._gini(y[right_indices])\n",
        "\n",
        "        weighted_gini = (n_left / n) * gini_left + (n_right / n) * gini_right\n",
        "        return weighted_gini\n",
        "\n",
        "    def _split(self, X_column, threshold):\n",
        "        \"\"\"Split the data into two groups based on the threshold.\"\"\"\n",
        "        left_indices = np.where(X_column <= threshold)[0]\n",
        "        right_indices = np.where(X_column > threshold)[0]\n",
        "        return left_indices, right_indices\n",
        "\n",
        "    def _gini(self, y):\n",
        "        \"\"\"Calculate Gini index for a node.\"\"\"\n",
        "        proportions = np.bincount(y) / len(y)\n",
        "        return 1 - np.sum(proportions ** 2)\n",
        "\n",
        "    def _most_common_label(self, y):\n",
        "        \"\"\"Return the most common class label in a node.\"\"\"\n",
        "        return np.bincount(y).argmax()\n",
        "\n",
        "    def _predict_sample(self, sample, tree):\n",
        "        \"\"\"Recursively traverse the tree to predict the class for a sample.\"\"\"\n",
        "        if isinstance(tree, dict):\n",
        "            feature = tree['feature']\n",
        "            threshold = tree['threshold']\n",
        "            if sample[feature] <= threshold:\n",
        "                return self._predict_sample(sample, tree['left'])\n",
        "            else:\n",
        "                return self._predict_sample(sample, tree['right'])\n",
        "        else:\n",
        "            return tree\n",
        "\n",
        "# Example usage:\n",
        "if __name__ == \"__main__\":\n",
        "    # Sample data (X: features, y: target labels)\n",
        "    X = np.array([[2, 3],\n",
        "                  [10, 15],\n",
        "                  [6, 8],\n",
        "                  [14, 18],\n",
        "                  [8, 9],\n",
        "                  [12, 13]])\n",
        "    y = np.array([0, 1, 0, 1, 0, 1])\n",
        "\n",
        "    # Train the decision tree\n",
        "    clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2)\n",
        "    clf.fit(X, y)\n",
        "\n",
        "    # Predict on the training data\n",
        "    predictions = clf.predict(X)\n",
        "    print(\"Predictions:\", predictions)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3- Testing on Titanic Dataset"
      ],
      "metadata": {
        "id": "goUbBf2oJJoA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "import seaborn as sns\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Load the Titanic dataset from seaborn\n",
        "import seaborn as sns\n",
        "titanic = sns.load_dataset('titanic')\n",
        "\n",
        "# Drop irrelevant columns and rows with missing target values\n",
        "df = titanic.drop(['deck', 'embark_town', 'alive', 'class', 'who', 'adult_male', 'embarked'], axis=1).dropna(subset=['survived'])\n",
        "\n",
        "# Fill missing values for 'age' with the median\n",
        "df['age'] = df['age'].fillna(df['age'].median())\n",
        "\n",
        "# Drop rows with any remaining missing values\n",
        "df = df.dropna()\n",
        "\n",
        "# Encode categorical variables: sex, alone\n",
        "label_encoders = {}\n",
        "for column in df.select_dtypes(include='object').columns:\n",
        "    le = LabelEncoder()\n",
        "    df[column] = le.fit_transform(df[column])\n",
        "    label_encoders[column] = le\n",
        "\n",
        "# Define the feature set (X) and the target variable (y)\n",
        "X = df.drop(['survived'], axis=1)\n",
        "y = df['survived']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Using the custom Decision Tree Classifier from the previous implementation\n",
        "clf = DecisionTreeClassifier(max_depth=3, min_samples_split=5)\n",
        "clf.fit(X_train.values, y_train.values)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred = clf.predict(X_test.values)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy on test set: {accuracy * 100:.2f}%\")\n",
        "\n",
        "# Show first few predictions vs actual values\n",
        "print(\"First few predictions:\", y_pred[:10])\n",
        "print(\"Actual values:\", y_test.values[:10])\n",
        "\n"
      ],
      "metadata": {
        "id": "cOHjGDGhHEgg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "id": "ufmwSfGTHRwj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}